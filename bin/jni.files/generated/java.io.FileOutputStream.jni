
java.io.FileOutputStream

********************************************************************************

java.io.FileOutputStream.jni was generated as a helper for FileOutputStream.java using the
bin/jni.bash script. The following code segments are C++ header and source code containing:

- getCanonicalName: The method that enables the relationship between C++ and Java.
- Java methods: java.io.FileOutputStream, getChannel

The source code can be copied into the respective FileOutputStream.h and
FileOutputStream.cpp files in a location of your choice. Finally, the last segment
contains an example of what these method calls would look like in your code.

********************************************************************************

#include "JniHelpers.h"

class FileOutputStream : public JavaClass {
  public:
    /**
    * This facsimile of the Java method java.lang.Class.getCanonicalName() is used to maintain 
    * the Jni Helper's relationship to the FileOutputStream class defined in Java.
    */
    const char *getCanonicalName() const {
        return MAKE_CANONICAL_NAME("java/io", FileOutputStream);
    }
    FileOutputStream();

    FileOutputStream(JNIEnv *env);

    void initialize(JNIEnv *env);

    void mapFields();

    jobject getChannel(JNIEnv *env);

};

********************************************************************************


FileOutputStream::FileOutputStream() : JavaClass() {}

/**
* Here you can construct the FileOutputStream object how ever you need to, 
* as well as load signatures for the Java instance method calls.
*/
FileOutputStream::FileOutputStream(JNIEnv *env) : JavaClass(env)
{
    initialize(env);

    thisObj = toJavaObject(env); // THIS IS WHERE WE INITIALIZE YOUR JAVA OBJECT

    // thisObj = env->NewObject(_clazz, getMethod("<init>"));
    // YOU MAY WANT TO ADD A FEW PARAMETERS TO THE 'NewObject' EXAMPLE INSTEAD

    if (thisObj == NULL) {
        JavaExceptionUtils::throwExceptionOfType(env, kTypeIllegalStateException,
            "FileOutputStream's thisObj variable not intialized, methods of this class use the thisObj Java instance.");
    }
}

void FileOutputStream::initialize(JNIEnv *env)
{
    cacheConstructor(env);

    addJavaSignature("getChannel", "()Ljava/nio/channels/FileChannel;");

    registerNativeMethods(env);
}

void FileOutputStream::mapFields()
{
    //mapField("encodedString", kTypeString, &encodedString);
}

jobject FileOutputStream::getChannel(JNIEnv *env)
{
    jobject result = env->CallObjectMethod(thisObj, getJavaMethod(env, __FUNCTION__));
    JavaExceptionUtils::checkException(env);
    return result;
}


********************************************************************************

jobject jobjectReturnValue = instance.getChannel(env);


