
javax.crypto.spec.SecretKeySpec

********************************************************************************

javax.crypto.spec.SecretKeySpec.jni was generated as a helper for SecretKeySpec.java using the
bin/jni.bash script. The following code segments are C++ header and source code containing:

- getCanonicalName: The method that enables the relationship between C++ and Java.
- Java methods: javax.crypto.spec.SecretKeySpec, javax.crypto.spec.SecretKeySpec, getAlgorithm, getFormat, getEncoded, hashCode, equals

The source code can be copied into the respective SecretKeySpec.h and
SecretKeySpec.cpp files in a location of your choice. Finally, the last segment
contains an example of what these method calls would look like in your code.

********************************************************************************

#include "JniHelpers.h"

class SecretKeySpec : public JavaClass {
    jobject thisObj;
  public:
    /**
    * This facsimile of the Java method java.lang.Class.getCanonicalName() is used to maintain 
    * the Jni Helper's relationship to the SecretKeySpec class defined in Java.
    */
    const char *getCanonicalName() const {
        return MAKE_CANONICAL_NAME("javax/crypto/spec", SecretKeySpec);
    }
    SecretKeySpec();

    SecretKeySpec(JNIEnv *env);

    void initialize(JNIEnv *env);

    void mapFields();

    jstring getAlgorithm(JNIEnv *env);

    jstring getFormat(JNIEnv *env);

    jbyteArray getEncoded(JNIEnv *env);

    jint hashCode(JNIEnv *env);

    jboolean equals(JNIEnv *env, jobject jobjectValue1);

};

********************************************************************************


SecretKeySpec::SecretKeySpec() : JavaClass() {}

/**
* Here you can construct the SecretKeySpec object how ever you need to, 
* as well as load signatures for the Java instance method calls.
*/
SecretKeySpec::SecretKeySpec(JNIEnv *env) : JavaClass(env)
{
    initialize(env);

    thisObj = toJavaObject(env); // THIS IS WHERE WE INITIALIZE YOUR JAVA OBJECT

    // thisObj = env->NewObject(_clazz, getMethod("<init>"));
    // YOU MAY WANT TO ADD A FEW PARAMETERS TO THE 'NewObject' EXAMPLE INSTEAD

    if (thisObj == NULL) {
        JavaExceptionUtils::throwExceptionOfType(env, kTypeIllegalStateException,
            "SecretKeySpec's thisObj variable not intialized, methods of this class use the thisObj Java instance.");
    }
}

void SecretKeySpec::initialize(JNIEnv *env)
{
    setClass(env);
    cacheConstructor(env);

    cacheSignature(env, "getAlgorithm", "()Ljava/lang/String;");
    cacheSignature(env, "getFormat", "()Ljava/lang/String;");
    cacheSignature(env, "getEncoded", "()[B");
    cacheSignature(env, "hashCode", "()I");
    cacheSignature(env, "equals", "(Ljava/lang/Object;)Z");

    registerNativeMethods(env);
}

void SecretKeySpec::mapFields()
{
    //mapField("encodedString", kTypeString, &encodedString);
}

jstring SecretKeySpec::getAlgorithm(JNIEnv *env)
{
    jobject result = env->CallObjectMethod(thisObj, getMethod(__FUNCTION__));
    JavaExceptionUtils::checkException(env);
    return (jstring) result;
}

jstring SecretKeySpec::getFormat(JNIEnv *env)
{
    jobject result = env->CallObjectMethod(thisObj, getMethod(__FUNCTION__));
    JavaExceptionUtils::checkException(env);
    return (jstring) result;
}

jbyteArray SecretKeySpec::getEncoded(JNIEnv *env)
{
    jbyteArray result = (jbyteArray) env->CallObjectMethod(thisObj, getMethod(__FUNCTION__));
    JavaExceptionUtils::checkException(env);
    return result;
}

jint SecretKeySpec::hashCode(JNIEnv *env)
{
    jint result = env->CallIntMethod(thisObj, getMethod(__FUNCTION__));
    JavaExceptionUtils::checkException(env);
    return result;
}

jboolean SecretKeySpec::equals(JNIEnv *env, jobject jobjectValue1)
{
    jboolean result = env->CallBooleanMethod(thisObj, getMethod(__FUNCTION__), jobjectValue1);
    JavaExceptionUtils::checkException(env);
    return result;
}


********************************************************************************

jstring jstringReturnValue = instance.getAlgorithm(env);

jstring jstringReturnValue = instance.getFormat(env);

jbyteArray jbyteArrayReturnValue = instance.getEncoded(env);

jint jintReturnValue = instance.hashCode(env);

jboolean jbooleanReturnValue = instance.equals(env, jobjectValue1);


