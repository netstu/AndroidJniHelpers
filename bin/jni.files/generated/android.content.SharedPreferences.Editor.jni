
android.content.SharedPreferences.Editor

********************************************************************************

android.content.SharedPreferences.Editor.jni was generated as a helper for Editor.java using the
bin/jni.bash script. The following code segments are C++ header and source code containing:

- getCanonicalName: The method that enables the relationship between C++ and Java.
- Java methods: putString, putStringSet, putInt, putLong, putFloat, putBoolean, remove, clear, commit, apply

The source code can be copied into the respective Editor.h and
Editor.cpp files in a location of your choice. Finally, the last segment
contains an example of what these method calls would look like in your code.

********************************************************************************

#include "JniHelpers.h"

class Editor : public JavaClass {
  public:
    /**
    * This facsimile of the Java method java.lang.Class.getCanonicalName() is used to maintain 
    * the Jni Helper's relationship to the Editor class defined in Java.
    */
    const char *getCanonicalName() const {
        return MAKE_CANONICAL_NAME("android/content/SharedPreferences", Editor);
    }
    Editor();

    Editor(JNIEnv *env);

    void initialize(JNIEnv *env);

    void mapFields();

    jobject putString(JNIEnv *env, jstring jstringValue1, jstring jstringValue2);

    jobject putStringSet(JNIEnv *env, jstring jstringValue1, java.util.Set<jstring> java.util.Set<jstring>Value2);

    jobject putInt(JNIEnv *env, jstring jstringValue1, jint jintValue2);

    jobject putLong(JNIEnv *env, jstring jstringValue1, jlong jlongValue2);

    jobject putFloat(JNIEnv *env, jstring jstringValue1, jfloat jfloatValue2);

    jobject putBoolean(JNIEnv *env, jstring jstringValue1, jboolean jbooleanValue2);

    jobject remove(JNIEnv *env, jstring jstringValue1);

    jobject clear(JNIEnv *env);

    jboolean commit(JNIEnv *env);

    void apply(JNIEnv *env);

};

********************************************************************************


Editor::Editor() : JavaClass() {}

/**
* Here you can construct the Editor object how ever you need to, 
* as well as load signatures for the Java instance method calls.
*/
Editor::Editor(JNIEnv *env) : JavaClass(env)
{
    initialize(env);

    thisObj = toJavaObject(env); // THIS IS WHERE WE INITIALIZE YOUR JAVA OBJECT

    // thisObj = env->NewObject(_clazz, getMethod("<init>"));
    // YOU MAY WANT TO ADD A FEW PARAMETERS TO THE 'NewObject' EXAMPLE INSTEAD

    if (thisObj == NULL) {
        JavaExceptionUtils::throwExceptionOfType(env, kTypeIllegalStateException,
            "Editor's thisObj variable not intialized, methods of this class use the thisObj Java instance.");
    }
}

void Editor::initialize(JNIEnv *env)
{
    cacheConstructor(env);

    addJavaSignature("putString", "(Ljava/lang/String;Ljava/lang/String;)Landroid/content/SharedPreferences$Editor;");
    addJavaSignature("putStringSet", "(Ljava/lang/String;Ljava/util/Set;)Landroid/content/SharedPreferences$Editor;");
    addJavaSignature("putInt", "(Ljava/lang/String;I)Landroid/content/SharedPreferences$Editor;");
    addJavaSignature("putLong", "(Ljava/lang/String;J)Landroid/content/SharedPreferences$Editor;");
    addJavaSignature("putFloat", "(Ljava/lang/String;F)Landroid/content/SharedPreferences$Editor;");
    addJavaSignature("putBoolean", "(Ljava/lang/String;Z)Landroid/content/SharedPreferences$Editor;");
    addJavaSignature("remove", "(Ljava/lang/String;)Landroid/content/SharedPreferences$Editor;");
    addJavaSignature("clear", "()Landroid/content/SharedPreferences$Editor;");
    addJavaSignature("commit", "()Z");
    addJavaSignature("apply", "()V");

    registerNativeMethods(env);
}

void Editor::mapFields()
{
    //mapField("encodedString", kTypeString, &encodedString);
}

jobject Editor::putString(JNIEnv *env, jstring jstringValue1, jstring jstringValue2)
{
    jobject result = env->CallObjectMethod(thisObj, getJavaMethod(env, __FUNCTION__), jstringValue1, jstringValue2);
    JavaExceptionUtils::checkException(env);
    return result;
}

jobject Editor::putStringSet(JNIEnv *env, jstring jstringValue1, java.util.Set<jstring> java.util.Set<jstring>Value2)
{
    jobject result = env->CallObjectMethod(thisObj, getJavaMethod(env, __FUNCTION__), jstringValue1, java.util.Set<jstring>Value2);
    JavaExceptionUtils::checkException(env);
    return result;
}

jobject Editor::putInt(JNIEnv *env, jstring jstringValue1, jint jintValue2)
{
    jobject result = env->CallObjectMethod(thisObj, getJavaMethod(env, __FUNCTION__), jstringValue1, jintValue2);
    JavaExceptionUtils::checkException(env);
    return result;
}

jobject Editor::putLong(JNIEnv *env, jstring jstringValue1, jlong jlongValue2)
{
    jobject result = env->CallObjectMethod(thisObj, getJavaMethod(env, __FUNCTION__), jstringValue1, jlongValue2);
    JavaExceptionUtils::checkException(env);
    return result;
}

jobject Editor::putFloat(JNIEnv *env, jstring jstringValue1, jfloat jfloatValue2)
{
    jobject result = env->CallObjectMethod(thisObj, getJavaMethod(env, __FUNCTION__), jstringValue1, jfloatValue2);
    JavaExceptionUtils::checkException(env);
    return result;
}

jobject Editor::putBoolean(JNIEnv *env, jstring jstringValue1, jboolean jbooleanValue2)
{
    jobject result = env->CallObjectMethod(thisObj, getJavaMethod(env, __FUNCTION__), jstringValue1, jbooleanValue2);
    JavaExceptionUtils::checkException(env);
    return result;
}

jobject Editor::remove(JNIEnv *env, jstring jstringValue1)
{
    jobject result = env->CallObjectMethod(thisObj, getJavaMethod(env, __FUNCTION__), jstringValue1);
    JavaExceptionUtils::checkException(env);
    return result;
}

jobject Editor::clear(JNIEnv *env)
{
    jobject result = env->CallObjectMethod(thisObj, getJavaMethod(env, __FUNCTION__));
    JavaExceptionUtils::checkException(env);
    return result;
}

jboolean Editor::commit(JNIEnv *env)
{
    jboolean result = env->CallBooleanMethod(thisObj, getJavaMethod(env, __FUNCTION__));
    JavaExceptionUtils::checkException(env);
    return result;
}

void Editor::apply(JNIEnv *env)
{
    env->CallVoidMethod(thisObj, getJavaMethod(env, __FUNCTION__));
    JavaExceptionUtils::checkException(env);
}


********************************************************************************

jobject jobjectReturnValue = instance.putString(env, jstringValue1, jstringValue2);

jobject jobjectReturnValue = instance.putStringSet(env, jstringValue1, java.util.Set<jstring>Value2);

jobject jobjectReturnValue = instance.putInt(env, jstringValue1, jintValue2);

jobject jobjectReturnValue = instance.putLong(env, jstringValue1, jlongValue2);

jobject jobjectReturnValue = instance.putFloat(env, jstringValue1, jfloatValue2);

jobject jobjectReturnValue = instance.putBoolean(env, jstringValue1, jbooleanValue2);

jobject jobjectReturnValue = instance.remove(env, jstringValue1);

jobject jobjectReturnValue = instance.clear(env);

jboolean jbooleanReturnValue = instance.commit(env);

instance.apply(env);


