
us.the.mac.android.jni.helpers.CryptoHelper

********************************************************************************

us.the.mac.android.jni.helpers.CryptoHelper.jni was generated as a helper for CryptoHelper.java using the
bin/jni.bash script. The following code segments are C++ header and source code containing:

- getCanonicalName: The method that enables the relationship between C++ and Java.
- Java methods: us.the.mac.android.jni.helpers.CryptoHelper, generateKey, decrypt, decrypt, destroy

The source code can be copied into the respective CryptoHelper.h and
CryptoHelper.cpp files in a location of your choice. Finally, the last segment
contains an example of what these method calls would look like in your code.

********************************************************************************

#include "JniHelpers.h"

using spotify::jni::NativeObject

class CryptoHelper : public NativeObject {
  public:
    /**
    * This facsimile of the Java method java.lang.Class.getCanonicalName() is used to maintain 
    * the Jni Helper's relationship to the CryptoHelper class defined in Java.
    */
    const char *getCanonicalName() const {
        return MAKE_CANONICAL_NAME("us/the/mac/android/jni/helpers", CryptoHelper);
    }
    CryptoHelper();

    CryptoHelper(JNIEnv *env);

    void initialize(JNIEnv *env);

    void mapFields();

    jobject generateKeyNative(JNIEnv *env);

    static jobject generateKey(JNIEnv *env, jobject java_this);

    jbyteArray decrypt(JNIEnv *env, jbyteArray jbyteArrayValue1, jbyteArray jbyteArrayValue2);

    jstring decrypt(JNIEnv *env, jstring jstringValue1);

};

********************************************************************************


CryptoHelper::CryptoHelper() : NativeObject() {}

/**
* Here you can construct the CryptoHelper object how ever you need to, 
* as well as load signatures for the Java instance method calls.
*/
CryptoHelper::CryptoHelper(JNIEnv *env) : NativeObject(env)
{
    initialize(env);

    thisObj = toJavaObject(env); // THIS IS WHERE WE INITIALIZE YOUR JAVA OBJECT

    // thisObj = env->NewObject(_clazz, getMethod("<init>"));
    // YOU MAY WANT TO ADD A FEW PARAMETERS TO THE 'NewObject' EXAMPLE INSTEAD

    if (thisObj == NULL) {
        JavaExceptionUtils::throwExceptionOfType(env, kTypeIllegalStateException,
            "CryptoHelper's thisObj variable not intialized, methods of this class use the thisObj Java instance.");
    }
}

void CryptoHelper::initialize(JNIEnv *env)
{
    cacheConstructor(env);

    addNativeSignature("generateKey", (void*)&CryptoHelper::generateKey, "()Ljava/security/Key;");
    cacheSignature(env, "decrypt", "([B[B)[B");
    cacheSignature(env, "decrypt", "(Ljava/lang/String;)Ljava/lang/String;");
    addNativeSignature("destroy", (void*)&CryptoHelper::destroy, "()V");

    registerNativeMethods(env);
}

void CryptoHelper::mapFields()
{
    //mapField("encodedString", kTypeString, &encodedString);
}

jobject CryptoHelper::generateKeyNative(JNIEnv *env) { return CryptoHelper::generateKey(env, thisObj); }

jobject CryptoHelper::generateKey(JNIEnv *env, jobject java_this) {
    CryptoHelper *object = gClasses.getNativeInstance<CryptoHelper>(env, java_this);
    
    if (object != NULL)
    {
	// TODO: ADD YOUR NATIVE IMPLMENTATION HERE (i.e. object->callToSomeFunction())
    }

    return NULL;
}


jbyteArray CryptoHelper::decrypt(JNIEnv *env, jbyteArray jbyteArrayValue1, jbyteArray jbyteArrayValue2)
{
    jbyteArray result = (jbyteArray) env->CallObjectMethod(thisObj, getMethod(__FUNCTION__), jbyteArrayValue1, jbyteArrayValue2);
    JavaExceptionUtils::checkException(env);
    return result;
}

jstring CryptoHelper::decrypt(JNIEnv *env, jstring jstringValue1)
{
    jobject result = env->CallObjectMethod(thisObj, getMethod(__FUNCTION__), jstringValue1);
    JavaExceptionUtils::checkException(env);
    return (jstring) result;
}


********************************************************************************

jobject jobjectReturnValue = instance.generateKey(env);

jbyteArray jbyteArrayReturnValue = instance.decrypt(env, jbyteArrayValue1, jbyteArrayValue2);

jstring jstringReturnValue = instance.decrypt(env, jstringValue1);


