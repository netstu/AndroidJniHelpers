
android.app.Context

********************************************************************************

android.app.Context.jni was generated as a helper for Context.java using the
bin/jni.bash script. The following code segments are C++ header and source code containing:

- getCanonicalName: The method that enables the relationship between C++ and Java.
- Java methods: javax.net.ssl.SSLContext, setDefault, getProtocol, getProvider, getSocketFactory, getServerSocketFactory, createSSLEngine, createSSLEngine, getServerSessionContext, getClientSessionContext, getDefaultSSLParameters, getSupportedSSLParameters

The source code can be copied into the respective Context.h and
Context.cpp files in a location of your choice. Finally, the last segment
contains an example of what these method calls would look like in your code.

********************************************************************************

#include "JniHelpers.h"

class Context : public JavaClass {
    static std::map<std::string, std::string> static_signatures;
  public:
    /**
    * This facsimile of the Java method java.lang.Class.getCanonicalName() is used to maintain 
    * the Jni Helper's relationship to the Context class defined in Java.
    */
    const char *getCanonicalName() const {
        return MAKE_CANONICAL_NAME("android/app", Context);
    }
    /**
    * This facsimile of the Java method java.lang.Object.getClass() is used to maintain 
    * the Jni Helper's static relationship to the Context class defined in Java.
    */
    static jclass getClass(JNIEnv *env) {
      return env->FindClass(MAKE_CANONICAL_NAME("android/app", Context));
    }
    /**
    * The getStaticSignature method is used to get the Jni Helper's
    * static signature for the Context class defined in Java.
    */
    static const char *getStaticSignature(const char *functionName) {
      std::string signature = static_signatures[functionName];
      return signature.c_str();
    }
    void addStaticSignature(const char *functionName, const char *signature) {
        static_signatures[functionName] = signature;
    }

    Context();

    Context(JNIEnv *env);

    void initialize(JNIEnv *env);

    void mapFields();

    // protected javax.net.ssl.SSLContext;

    static void setDefault(JNIEnv *env, jobject jobjectValue1);

    jstring getProtocol(JNIEnv *env);

    jobject getProvider(JNIEnv *env);

    jobject getSocketFactory(JNIEnv *env);

    jobject getServerSocketFactory(JNIEnv *env);

    jobject createSSLEngine(JNIEnv *env);

    jobject createSSLEngine(JNIEnv *env);

    jobject getServerSessionContext(JNIEnv *env);

    jobject getClientSessionContext(JNIEnv *env);

    jobject getDefaultSSLParameters(JNIEnv *env);

    jobject getSupportedSSLParameters(JNIEnv *env);

};

********************************************************************************


Context::Context() : JavaClass() {}

/**
* Here you can construct the Context object how ever you need to, 
* as well as load signatures for the Java instance method calls.
*/
Context::Context(JNIEnv *env) : JavaClass(env)
{
    initialize(env);

    thisObj = toJavaObject(env); // THIS IS WHERE WE INITIALIZE YOUR JAVA OBJECT

    // thisObj = env->NewObject(_clazz, getMethod("<init>"));
    // YOU MAY WANT TO ADD A FEW PARAMETERS TO THE 'NewObject' EXAMPLE INSTEAD

    if (thisObj == NULL) {
        JavaExceptionUtils::throwExceptionOfType(env, kTypeIllegalStateException,
            "Context's thisObj variable not intialized, methods of this class use the thisObj Java instance.");
    }
}

void Context::initialize(JNIEnv *env)
{
    cacheConstructor(env);

    addJavaSignature("javax/net/ssl/SSLContext", "(Ljavax/net/ssl/SSLContextSpi;Ljava/security/Provider;Ljava/lang/String;)V");
    addStaticSignature("setDefault", "(Ljavax/net/ssl/SSLContext;)V");
    addJavaSignature("getProtocol", "()Ljava/lang/String;");
    addJavaSignature("getProvider", "()Ljava/security/Provider;");
    addJavaSignature("getSocketFactory", "()Ljavax/net/ssl/SSLSocketFactory;");
    addJavaSignature("getServerSocketFactory", "()Ljavax/net/ssl/SSLServerSocketFactory;");
    addJavaSignature("createSSLEngine", "()Ljavax/net/ssl/SSLEngine;");
    addJavaSignature("createSSLEngine", "(Ljava/lang/String;I)Ljavax/net/ssl/SSLEngine;");
    addJavaSignature("getServerSessionContext", "()Ljavax/net/ssl/SSLSessionContext;");
    addJavaSignature("getClientSessionContext", "()Ljavax/net/ssl/SSLSessionContext;");
    addJavaSignature("getDefaultSSLParameters", "()Ljavax/net/ssl/SSLParameters;");
    addJavaSignature("getSupportedSSLParameters", "()Ljavax/net/ssl/SSLParameters;");

    registerNativeMethods(env);
}

void Context::mapFields()
{
    //mapField("encodedString", kTypeString, &encodedString);
}

// protected javax.net.ssl.SSLContext


void Context::setDefault(JNIEnv *env, jobject jobjectValue1)
{
    env->CallStaticVoidMethod(getClass(env), getStaticMethod(env, getClass(env), __FUNCTION__), jobjectValue1);
    JavaExceptionUtils::checkException(env);
}

jstring Context::getProtocol(JNIEnv *env)
{
    jobject result = env->CallObjectMethod(thisObj, getJavaMethod(env, __FUNCTION__));
    JavaExceptionUtils::checkException(env);
    return (jstring) result;
}

jobject Context::getProvider(JNIEnv *env)
{
    jobject result = env->CallObjectMethod(thisObj, getJavaMethod(env, __FUNCTION__));
    JavaExceptionUtils::checkException(env);
    return result;
}

jobject Context::getSocketFactory(JNIEnv *env)
{
    jobject result = env->CallObjectMethod(thisObj, getJavaMethod(env, __FUNCTION__));
    JavaExceptionUtils::checkException(env);
    return result;
}

jobject Context::getServerSocketFactory(JNIEnv *env)
{
    jobject result = env->CallObjectMethod(thisObj, getJavaMethod(env, __FUNCTION__));
    JavaExceptionUtils::checkException(env);
    return result;
}

jobject Context::createSSLEngine(JNIEnv *env)
{
    jobject result = env->CallObjectMethod(thisObj, getJavaMethod(env, __FUNCTION__));
    JavaExceptionUtils::checkException(env);
    return result;
}

jobject Context::createSSLEngine(JNIEnv *env)
{
    jobject result = env->CallObjectMethod(thisObj, getJavaMethod(env, __FUNCTION__));
    JavaExceptionUtils::checkException(env);
    return result;
}

jobject Context::getServerSessionContext(JNIEnv *env)
{
    jobject result = env->CallObjectMethod(thisObj, getJavaMethod(env, __FUNCTION__));
    JavaExceptionUtils::checkException(env);
    return result;
}

jobject Context::getClientSessionContext(JNIEnv *env)
{
    jobject result = env->CallObjectMethod(thisObj, getJavaMethod(env, __FUNCTION__));
    JavaExceptionUtils::checkException(env);
    return result;
}

jobject Context::getDefaultSSLParameters(JNIEnv *env)
{
    jobject result = env->CallObjectMethod(thisObj, getJavaMethod(env, __FUNCTION__));
    JavaExceptionUtils::checkException(env);
    return result;
}

jobject Context::getSupportedSSLParameters(JNIEnv *env)
{
    jobject result = env->CallObjectMethod(thisObj, getJavaMethod(env, __FUNCTION__));
    JavaExceptionUtils::checkException(env);
    return result;
}


********************************************************************************

protected protectedReturnValue = instance.javax.net.ssl.SSLContext(env, jobjectValue1, jobjectValue2, jstringValue3);

Context::setDefault(env, jobjectValue1);

jstring jstringReturnValue = instance.getProtocol(env);

jobject jobjectReturnValue = instance.getProvider(env);

jobject jobjectReturnValue = instance.getSocketFactory(env);

jobject jobjectReturnValue = instance.getServerSocketFactory(env);

jobject jobjectReturnValue = instance.createSSLEngine(env);

jobject jobjectReturnValue = instance.createSSLEngine(env);

jobject jobjectReturnValue = instance.getServerSessionContext(env);

jobject jobjectReturnValue = instance.getClientSessionContext(env);

jobject jobjectReturnValue = instance.getDefaultSSLParameters(env);

jobject jobjectReturnValue = instance.getSupportedSSLParameters(env);


