
us.the.mac.android.jni.helpers.Network

********************************************************************************

us.the.mac.android.jni.helpers.Network.jni was generated as a helper for Network.java using the
bin/jni.bash script. The following code segments are C++ header and source code containing:

- getCanonicalName: The method that enables the relationship between C++ and Java.
- Java methods: getInstance, testingDefault, getResultString, setResultString, destroy, getBytes, getHttpPost, put, get, toJSONString, setRequestType, request, access$000

The source code can be copied into the respective Network.h and
Network.cpp files in a location of your choice. Finally, the last segment
contains an example of what these method calls would look like in your code.

********************************************************************************

class Network : public NativeObject {
    static std::map<std::string, std::string> static_signatures;
    jobject thisObj;
  public:
    /**
    * This facsimile of the Java method java.lang.Class.getCanonicalName() is used to maintain 
    * the Jni Helper's relationship to the Network class defined in Java.
    */
    const char *getCanonicalName() const {
        return MAKE_CANONICAL_NAME("us/the/mac/android/jni/helpers", Network);
    }
    /**
    * This facsimile of the Java method java.lang.Object.getClass() is used to maintain 
    * the Jni Helper's static relationship to the Network class defined in Java.
    */
    static jclass getClass(JNIEnv *env) {
      return env->FindClass(MAKE_CANONICAL_NAME("us/the/mac/android/jni/helpers", Network));
    }
    /**
    * The getStaticSignature method is used to get the Jni Helper's
    * static signature for the Network class defined in Java.
    */
    static const char *getStaticSignature(const char *functionName) {
      std::string signature = static_signatures[functionName];
      return signature.c_str();
    }
    void addStaticSignature(const char *functionName, const char *signature) {
        static_signatures[functionName] = signature;
    }

    Network();

    Network(JNIEnv *env);

    void initialize(JNIEnv *env);

    void mapFields();

    static jobject getInstance(JNIEnv *env);

    static jobject testingDefault(JNIEnv *env);

    jstring getResultString(JNIEnv *env);

    void setResultString(JNIEnv *env, jstring jstringValue1);

    void destroyNative(JNIEnv *env);

    static void destroy(JNIEnv *env, jobject java_this);

    jbyteArray getBytesNative(JNIEnv *env);

    static jbyteArray getBytes(JNIEnv *env, jobject java_this);

    jobject getHttpPostNative(JNIEnv *env);

    static jobject getHttpPost(JNIEnv *env, jobject java_this);

    void putNative(JNIEnv *env, jstring jstringValue1, jstring jstringValue2);

    static void put(JNIEnv *env, jobject java_this, jstring jstringValue1, jstring jstringValue2);

    jstring getNative(JNIEnv *env, jstring jstringValue1);

    static jstring get(JNIEnv *env, jobject java_this, jstring jstringValue1);

    jstring toJSONStringNative(JNIEnv *env);

    static jstring toJSONString(JNIEnv *env, jobject java_this);

    void setRequestTypeNative(JNIEnv *env, jint jintValue1);

    static void setRequestType(JNIEnv *env, jobject java_this, jint jintValue1);

    jstring request(JNIEnv *env, jint jintValue1);

    static jobject access$000(JNIEnv *env, jobject jobjectValue1);

};

********************************************************************************


Network::Network() : NativeObject() {}

/**
* Here you can construct the Network object how ever you need to, 
* as well as load signatures for the Java instance method calls.
*/
Network::Network(JNIEnv *env) : NativeObject(env)
{
    initialize(env);

    thisObj = toJavaObject(env); // THIS IS WHERE WE INITIALIZE YOUR JAVA OBJECT

    // thisObj = env->NewObject(_clazz, getMethod(getCanonicalName()));
    // YOU MAY WANT TO ADD A FEW PARAMETERS TO THE 'NewObject' EXAMPLE INSTEAD

    if (thisObj == NULL) {
        JavaExceptionUtils::throwExceptionOfType(env, kTypeIllegalStateException,
            "Network's thisObj variable not intialized, methods of this class use the thisObj Java instance.");
    }
}

void Network::initialize(JNIEnv *env)
{
    setClass(env);
    cacheConstructor(env);

    addStaticSignature("getInstance", "()Lus/the/mac/android/jni/helpers/Network;");
    addStaticSignature("testingDefault", "()Lus/the/mac/android/jni/helpers/Network;");
    addJavaSignature("getResultString", "()Ljava/lang/String;");
    addJavaSignature("setResultString", "(Ljava/lang/String;)V");
    addNativeSignature("destroy", (void*)&Network::destroy, "()V");
    addNativeSignature("getBytes", (void*)&Network::getBytes, "()[B");
    addNativeSignature("getHttpPost", (void*)&Network::getHttpPost, "()Ljava/lang/Object;");
    addNativeSignature("put", (void*)&Network::put, "(Ljava/lang/String;Ljava/lang/String;)V");
    addNativeSignature("get", (void*)&Network::get, "(Ljava/lang/String;)Ljava/lang/String;");
    addNativeSignature("toJSONString", (void*)&Network::toJSONString, "()Ljava/lang/String;");
    addNativeSignature("setRequestType", (void*)&Network::setRequestType, "(I)V");
    addJavaSignature("request", "(I)Ljava/lang/String;");
    addStaticSignature("access$000", "(Lus/the/mac/android/jni/helpers/Network;)Lorg/apache/http/impl/client/DefaultHttpClient;");

    registerNativeMethods(env);
}

void Network::mapFields()
{
    //mapField("encodedString", kTypeString, &encodedString);
}

jobject Network::getInstance(JNIEnv *env)
{
    jobject result = env->CallStaticObjectMethod(getClass(env), getStaticMethod(env, getClass(env), __FUNCTION__));
    JavaExceptionUtils::checkException(env);
    return result;
}

jobject Network::testingDefault(JNIEnv *env)
{
    jobject result = env->CallStaticObjectMethod(getClass(env), getStaticMethod(env, getClass(env), __FUNCTION__));
    JavaExceptionUtils::checkException(env);
    return result;
}

jstring Network::getResultString(JNIEnv *env)
{
    jobject result = env->CallObjectMethod(thisObj, getJavaMethod(env, __FUNCTION__));
    JavaExceptionUtils::checkException(env);
    return (jstring) result;
}

void Network::setResultString(JNIEnv *env, jstring jstringValue1)
{
    env->CallVoidMethod(thisObj, getJavaMethod(env, __FUNCTION__), jstringValue1);
    JavaExceptionUtils::checkException(env);
}

void Network::destroyNative(JNIEnv *env) { Network::destroy(env, thisObj); }

void Network::destroy(JNIEnv *env, jobject java_this) {
    Network *object = gClasses.getNativeInstance<Network>(env, java_this);
    
    if (object != NULL)
    {
	// TODO: ADD YOUR NATIVE IMPLMENTATION HERE (i.e. object->callToSomeFunction())
    }

}


jbyteArray Network::getBytesNative(JNIEnv *env) { return Network::getBytes(env, thisObj); }

jbyteArray Network::getBytes(JNIEnv *env, jobject java_this) {
    Network *object = gClasses.getNativeInstance<Network>(env, java_this);
    
    if (object != NULL)
    {
	// TODO: ADD YOUR NATIVE IMPLMENTATION HERE (i.e. object->callToSomeFunction())
    }

    return NULL;
}


jobject Network::getHttpPostNative(JNIEnv *env) { return Network::getHttpPost(env, thisObj); }

jobject Network::getHttpPost(JNIEnv *env, jobject java_this) {
    Network *object = gClasses.getNativeInstance<Network>(env, java_this);
    
    if (object != NULL)
    {
	// TODO: ADD YOUR NATIVE IMPLMENTATION HERE (i.e. object->callToSomeFunction())
    }

    return null;
}


void Network::putNative(JNIEnv *env, jstring jstringValue1, jstring jstringValue2) { Network::put(env, thisObj, jstringValue1, jstringValue2); }

void Network::put(JNIEnv *env, jobject java_this, jstring jstringValue1, jstring jstringValue2) {
    Network *object = gClasses.getNativeInstance<Network>(env, java_this);
    
    if (object != NULL)
    {
	// TODO: ADD YOUR NATIVE IMPLMENTATION HERE (i.e. object->callToSomeFunction())
    }

}


jstring Network::getNative(JNIEnv *env, jstring jstringValue1) { return Network::get(env, thisObj, jstringValue1); }

jstring Network::get(JNIEnv *env, jobject java_this, jstring jstringValue1) {
    Network *object = gClasses.getNativeInstance<Network>(env, java_this);
    
    if (object != NULL)
    {
	// TODO: ADD YOUR NATIVE IMPLMENTATION HERE (i.e. object->callToSomeFunction())
    }

    return NULL;
}


jstring Network::toJSONStringNative(JNIEnv *env) { return Network::toJSONString(env, thisObj); }

jstring Network::toJSONString(JNIEnv *env, jobject java_this) {
    Network *object = gClasses.getNativeInstance<Network>(env, java_this);
    
    if (object != NULL)
    {
	// TODO: ADD YOUR NATIVE IMPLMENTATION HERE (i.e. object->callToSomeFunction())
    }

    return NULL;
}


void Network::setRequestTypeNative(JNIEnv *env, jint jintValue1) { Network::setRequestType(env, thisObj, jintValue1); }

void Network::setRequestType(JNIEnv *env, jobject java_this, jint jintValue1) {
    Network *object = gClasses.getNativeInstance<Network>(env, java_this);
    
    if (object != NULL)
    {
	// TODO: ADD YOUR NATIVE IMPLMENTATION HERE (i.e. object->callToSomeFunction())
    }

}


jstring Network::request(JNIEnv *env, jint jintValue1)
{
    jobject result = env->CallObjectMethod(thisObj, getJavaMethod(env, __FUNCTION__), jintValue1);
    JavaExceptionUtils::checkException(env);
    return (jstring) result;
}

jobject Network::access$000(JNIEnv *env, jobject jobjectValue1)
{
    jobject result = env->CallStaticObjectMethod(getClass(env), getStaticMethod(env, getClass(env), __FUNCTION__), jobjectValue1);
    JavaExceptionUtils::checkException(env);
    return result;
}


********************************************************************************

jobject jobjectReturnValue = Network::getInstance(env);

jobject jobjectReturnValue = Network::testingDefault(env);

jstring jstringReturnValue = instance.getResultString(env);

instance.setResultString(env, jstringValue1);

instance.destroy(env);

jbyteArray jbyteArrayReturnValue = instance.getBytes(env);

jobject jobjectReturnValue = instance.getHttpPost(env);

instance.put(env, jstringValue1, jstringValue2);

jstring jstringReturnValue = instance.get(env, jstringValue1);

jstring jstringReturnValue = instance.toJSONString(env);

instance.setRequestType(env, jintValue1);

jstring jstringReturnValue = instance.request(env, jintValue1);

jobject jobjectReturnValue = Network::access$000(env, jobjectValue1);


