
java.security.Key

********************************************************************************

java.security.Key.jni was generated as a helper for Key.java using the
bin/jni.bash script. The following code segments are C++ header and source code containing:

- getCanonicalName: The method that enables the relationship between C++ and Java.
- Java methods: getAlgorithm, getFormat, getEncoded

The source code can be copied into the respective Key.h and
Key.cpp files in a location of your choice. Finally, the last segment
contains an example of what these method calls would look like in your code.

********************************************************************************

#include "JniHelpers.h"

class Key : public JavaClass {
  public:
    /**
    * This facsimile of the Java method java.lang.Class.getCanonicalName() is used to maintain 
    * the Jni Helper's relationship to the Key class defined in Java.
    */
    const char *getCanonicalName() const {
        return MAKE_CANONICAL_NAME("java/security", Key);
    }
    Key();

    Key(JNIEnv *env);

    void initialize(JNIEnv *env);

    void mapFields();

    jstring getAlgorithm(JNIEnv *env);

    jstring getFormat(JNIEnv *env);

    jbyteArray getEncoded(JNIEnv *env);

};

********************************************************************************


Key::Key() : JavaClass() {}

/**
* Here you can construct the Key object how ever you need to, 
* as well as load signatures for the Java instance method calls.
*/
Key::Key(JNIEnv *env) : JavaClass(env)
{
    initialize(env);

    thisObj = toJavaObject(env); // THIS IS WHERE WE INITIALIZE YOUR JAVA OBJECT

    // thisObj = env->NewObject(_clazz, getMethod("<init>"));
    // YOU MAY WANT TO ADD A FEW PARAMETERS TO THE 'NewObject' EXAMPLE INSTEAD

    if (thisObj == NULL) {
        JavaExceptionUtils::throwExceptionOfType(env, kTypeIllegalStateException,
            "Key's thisObj variable not intialized, methods of this class use the thisObj Java instance.");
    }
}

void Key::initialize(JNIEnv *env)
{
    cacheConstructor(env);

    cacheSignature(env, "getAlgorithm", "()Ljava/lang/String;");
    cacheSignature(env, "getFormat", "()Ljava/lang/String;");
    cacheSignature(env, "getEncoded", "()[B");

    registerNativeMethods(env);
}

void Key::mapFields()
{
    //mapField("encodedString", kTypeString, &encodedString);
}

jstring Key::getAlgorithm(JNIEnv *env)
{
    jobject result = env->CallObjectMethod(thisObj, getMethod(__FUNCTION__));
    JavaExceptionUtils::checkException(env);
    return (jstring) result;
}

jstring Key::getFormat(JNIEnv *env)
{
    jobject result = env->CallObjectMethod(thisObj, getMethod(__FUNCTION__));
    JavaExceptionUtils::checkException(env);
    return (jstring) result;
}

jbyteArray Key::getEncoded(JNIEnv *env)
{
    jbyteArray result = (jbyteArray) env->CallObjectMethod(thisObj, getMethod(__FUNCTION__));
    JavaExceptionUtils::checkException(env);
    return result;
}


********************************************************************************

jstring jstringReturnValue = instance.getAlgorithm(env);

jstring jstringReturnValue = instance.getFormat(env);

jbyteArray jbyteArrayReturnValue = instance.getEncoded(env);


